/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgnew;

import com.sun.rowset.CachedRowSetImpl;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import net.proteanit.sql.DbUtils;
import static pkgnew.Bids.list_bid;
import static pkgnew.List_Items.rs_bidders;
import static pkgnew.List_Items.rs_individualitem;
import static pkgnew.Main_Frame.DisplayPanel;
import static pkgnew.Main_Frame.category;
import static pkgnew.Main_Frame.rs_bid;
import static pkgnew.Main_Frame.sub_category;
import static pkgnew.Main_Frame.user_login;
import static pkgnew.Main_Frame.card;
import static pkgnew.Main_Frame.crs_searchu;
import static pkgnew.Main_Frame.ip;
import static pkgnew.Profile.person_image;
import static pkgnew.Profile.profile_pic;
import static pkgnew.Profile.tf_address;
import static pkgnew.Profile.tf_confirmpass;
import static pkgnew.Profile.tf_currpass;
import static pkgnew.Profile.tf_email;
import static pkgnew.Profile.tf_mobile_no;
import static pkgnew.Profile.tf_newpass;
import static pkgnew.Profile.tf_username;
/**
 *
 * @author avishkar
 */
public class Search extends javax.swing.JPanel {

    /**
     * Creates new form Search
     */
    public Search() {
        initComponents();
    }
    
    public static CachedRowSetImpl crs_search = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bt_back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_search = new javax.swing.JList();
        tf_search = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_search_user = new javax.swing.JList();
        tf_search_user = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        bt_back.setText("back");
        bt_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_backActionPerformed(evt);
            }
        });

        list_search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_searchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list_search);

        tf_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_searchActionPerformed(evt);
            }
        });
        tf_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_searchKeyReleased(evt);
            }
        });

        list_search_user.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list_search_userMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(list_search_user);

        tf_search_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_search_userActionPerformed(evt);
            }
        });
        tf_search_user.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_search_userKeyReleased(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgnew/sear_i.png"))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgnew/search_u.png"))); // NOI18N

        jLabel3.setText("Search for Item:-");

        jLabel4.setText("search For people:-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                        .addComponent(tf_search, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bt_back, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(tf_search_user, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(tf_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bt_back)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(tf_search_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tf_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_searchKeyReleased
        // TODO add your handling code here:
        
        Thread t = new Thread(){
            
            public void run(){
            
                try {
                    
                    System.out.println("in search function");
                    String s= tf_search.getText();
                    Socket soc = new Socket(ip,12345);
                    
                    PrintWriter pr =new PrintWriter(soc.getOutputStream(),true);
                    pr.println("SEARCH");
                    
                    //ObjectOutputStream ob = new ObjectOutputStream(soc.getOutputStream());
                    //ob.writeObject(s);
                    
                    
                    System.out.println("writing to socket "+ s);
                    pr.println(s);
                    System.out.println("wrote to socket");
                    
                    DefaultListModel kuchbhi;
                    kuchbhi = new DefaultListModel();
                      
                   
                    ObjectInputStream ob1 = new ObjectInputStream(soc.getInputStream());
                    crs_search =  (CachedRowSetImpl)ob1.readObject();
                   
                    crs_search.beforeFirst();
                     while(crs_search.next())
                    {
                        String item_name = crs_search.getString("item_name");
                        System.out.println(item_name);
                        kuchbhi.addElement(item_name);
                        
                    }
                    list_search.setModel(kuchbhi);
                    
                    
                } catch (IOException ex) {
                    Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            
            }
        };
        t.start();
    }//GEN-LAST:event_tf_searchKeyReleased

    private void bt_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_backActionPerformed
        // TODO add your handling code here:
        CardLayout Card = (CardLayout)DisplayPanel.getLayout();
        card = "category";
        Card.show(DisplayPanel, "category");
    }//GEN-LAST:event_bt_backActionPerformed

    private void list_searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_searchMouseClicked
        // TODO add your handling code here:
                 Thread t = new Thread(){
            
            public void run(){
                    int item_id=0;
                try {
                    System.out.println("clicked on table");
                    String item_name = list_search.getSelectedValue().toString();
                    crs_search.beforeFirst();
                    while(crs_search.next())
                    {
                        if(crs_search.getString("item_name").equals(item_name))
                        {
                           item_id = crs_search.getInt("item_id");
                        }
                    }
                        System.out.println("item_id");
                   
                    Socket soc = new Socket(ip,12345);
                    PrintWriter pr = new PrintWriter(soc.getOutputStream(),true) ;
                    pr.println("INDIVIDUALITEM");
                    //pr.flush();
                    
                    BufferedReader buff = new BufferedReader(new InputStreamReader(soc.getInputStream()));
                    String str= buff.readLine();
                    System.out.println(str);
                    
                    System.out.println("writing itemid on socket");
                    
                    PrintWriter pr1 = new PrintWriter(soc.getOutputStream(),true) ;
                    pr1.println(item_id);
                    pr1.println(user_login);
                    
                    
                    
                    System.out.println("written on socket");
                    
                    System.out.println("getting first rs from server");
                    ObjectInputStream ob = new ObjectInputStream(soc.getInputStream());
                    
                    rs_individualitem =  (CachedRowSetImpl)ob.readObject(); 
                    System.out.println("got the first rs");
                    ObjectInputStream obj = new ObjectInputStream(soc.getInputStream());
                    rs_bidders =  (CachedRowSetImpl)obj.readObject();
                    System.out.println("got the second rs");
                    
                    
                    
                    if(rs_individualitem.next()){
                    
                        Items.label_itemname.setText(rs_individualitem.getString("item_name"));
                        Items.items_Info.setText(rs_individualitem.getString("item_name"));
                        Items.items_BasePrice.setText(rs_individualitem.getString("base_price"));
                        Items.items_TimeLimit.setText(rs_individualitem.getString("time_limit"));
                        Items.items_UploadDate.setText(rs_individualitem.getString("date"));
                        Items.items_UploadedBy.setText(rs_individualitem.getString("User_name"));
                        Main_Frame.category = rs_individualitem.getString("category");
                        Main_Frame.sub_category = rs_individualitem.getString("sub_category");
                        
                        
                        byte[] pic = rs_individualitem.getBytes("image");
                        ImageIcon img = new ImageIcon(pic);
                        Items.pic.setIcon(img);
                        
                        category = rs_individualitem.getString("category");
                        sub_category = rs_individualitem.getString("sub_category");
                    }
                    
                    
                    pr1.println(category);
                    pr1.println(sub_category);
                    Items.table_bids.setModel(DbUtils.resultSetToTableModel(rs_bidders));
                    
                    CardLayout Card = (CardLayout)DisplayPanel.getLayout();
                    card = "items";
                    Card.show(DisplayPanel, "items");
                    
                } catch (IOException ex) {
                    Logger.getLogger(List_Items.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(List_Items.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(List_Items.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
        
        };
        t.start();
    }//GEN-LAST:event_list_searchMouseClicked

    private void tf_search_userKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_search_userKeyReleased
        // TODO add your handling code here:
        
        Thread t = new Thread(){
            
            public void run(){
            
                try {
                    
                    System.out.println("in search function");
                    String s= tf_search_user.getText();
                    Socket soc = new Socket(ip,12345);
                    
                    PrintWriter pr =new PrintWriter(soc.getOutputStream(),true);
                    pr.println("USERSEARCH");
                    
                    //ObjectOutputStream ob = new ObjectOutputStream(soc.getOutputStream());
                    //ob.writeObject(s);
                    
                    
                    System.out.println("writing to socket "+ s);
                    pr.println(s);
                    System.out.println("wrote to socket");
                    
                    DefaultListModel kuchbhi;
                    kuchbhi = new DefaultListModel();
                      
                   
                    ObjectInputStream ob1 = new ObjectInputStream(soc.getInputStream());
                    crs_searchu =  (CachedRowSetImpl)ob1.readObject();
                   
                    crs_searchu.beforeFirst();
                     while(crs_searchu.next())
                    {
                        String item_name = crs_searchu.getString("User_Name");
                        System.out.println(item_name);
                        kuchbhi.addElement(item_name);
                        
                    }
                    list_search_user.setModel(kuchbhi);
                    
                    
                } catch (IOException ex) {
                    Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Search.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            
            }
        };
        t.start();
        
    }//GEN-LAST:event_tf_search_userKeyReleased

    private void list_search_userMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list_search_userMouseClicked
        // TODO add your handling code here:
        
        Thread t = new Thread(){
            
            public void run(){
                    
                try {
                    System.out.println("clicked on table");
                    String user_name = list_search_user.getSelectedValue().toString();
                    crs_searchu.beforeFirst();
                    while(crs_searchu.next())
                    {
                        String username=crs_searchu.getString("User_name");
                        String add=crs_searchu.getString("Address");
                         String email=crs_searchu.getString("Email");
                          String contact=crs_searchu.getString("ContactNo");
                          byte []img =crs_searchu.getBytes("image");
                          String name = crs_searchu.getString("Name");
                        if(username.equals(user_name))
                        {
                            
                            Userfromsearch.tf_username.setText(username);
                            Userfromsearch.tf_address.setText(add);
                            Userfromsearch.tf_email.setText(email);
                            Userfromsearch.tf_mobile_no.setText(contact);
                            Userfromsearch.tf_username.setEditable(false);
                            Userfromsearch.tf_address.setEditable(false);
                            Userfromsearch.tf_email.setEditable(false);
                            Userfromsearch.tf_mobile_no.setEditable(false);
                            Userfromsearch.tf_name.setText(name);
                            System.out.println(name + "    ho jaaaa" );

                            System.out.println("imgae successfully fetched from server");

                            ImageIcon format = new ImageIcon(img);
                            Userfromsearch.search_profilepic.setIcon(format);
                            break;
                        }
                    }
                    CardLayout Card = (CardLayout)DisplayPanel.getLayout();
                    //card = "profile";
                    Card.show(DisplayPanel, "usersearch");  
                    Main_Frame.SEARCH =true;
                    
                } catch (SQLException ex) {
                    Logger.getLogger(List_Items.class.getName()).log(Level.SEVERE, null, ex);
                } 
            
            }
        
        };
        t.start();
    }//GEN-LAST:event_list_search_userMouseClicked

    private void tf_search_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_search_userActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_search_userActionPerformed

    private void tf_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_searchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list_search;
    private javax.swing.JList list_search_user;
    private javax.swing.JTextField tf_search;
    private javax.swing.JTextField tf_search_user;
    // End of variables declaration//GEN-END:variables
}
